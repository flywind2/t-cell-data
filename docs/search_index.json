[
["index.html", "Learning About T Cells Through Data Preface", " Learning About T Cells Through Data Hammer Lab 2018-10-01 Preface This book explores what open data sets can tell us about T cells. This exploration will highlight a few of the many repositories of data available for analysis, provide code samples for working with this data, and examine the evidence in this data for the various subsets, states, and behaviors of T cells. There are two specific questions that motivate this exploration: Given a T cell, how can we determine its subset and state Given a T cell, how can we perturb it to a desired subset and state Wet lab protocols for working with human primary T cells are found in our lab’s Human Primary T cells: A Practical Guide (B. A. Aksoy et al. 2018). This book is complementary to that guide, with a focus on software and data rather than wet lab protocols. References "],
["introduction.html", "Chapter 1 Introduction", " Chapter 1 Introduction T cells are important. Here’s a picture of activated vs. unactivated T cells from (Jung et al. 2016). SEM images of resting (A) and effector (B) peripheral blood human T cells. (White scale bars: 1 μm.) TCRs are found in the squiggles. They are x size. Here’s the proportion in circulating blood. Here’s how many come from the thymus per day. Here’s how long they live. References "],
["flow.html", "Chapter 2 Flow", " Chapter 2 Flow The most common way to profile T cells: flow cytometry. It’s actually a single-cell method! We’ll examine the OMIP data available from FlowRepository. "],
["microarrays.html", "Chapter 3 Microarrays 3.1 Overview 3.2 Expression profiling with microarrays 3.3 T cell expression profiles 3.4 Exploring ImmuneSigDB 3.5 Data from one paper 3.6 Data from one gene set 3.7 Load expression data 3.8 Preprocess expression data 3.9 Map probesets to genes 3.10 Exploring preprocessed expression data 3.11 Differential expression analysis", " Chapter 3 Microarrays library(GEOquery) library(oligo) library(limma) library(biobroom) library(rentrez) library(curl) library(fs) library(urltools) library(xml2) library(lubridate) library(janitor) library(tidyverse) 3.1 Overview Our goal is to find some measurement we can perform to distinguish T cells from other cells, as well as T cell subsets from one another. Gene expression as measured by expression microarrays is one candidate measurement we could perform. In this chapter, we’ll seek out open expression microarray data generated from T cells and do some analysis to see if we can distinguish T cells and their subsets using this data. We will create several tibbles over the course of this chapter, including: c7_tcells: our best attempt at pulling out the T cell data sets from ImmuneSigDB. Each row is a gene set. c7_pubs: publications from which ImmuneSigDB gene sets are derived. Each row is a PMID. pGSE2770tidy: phenotype information for a single GSE GEO ID from ImmuneSigDB. Each row is a GSM GEO ID, i.e. a sample. eset_tib_genes: preprocessed expression data for the samples we’re analyzing. “Wide” version of table with one column per sample. Primary key is gene. eset_tidy_p: preprocessed expression data joined to phenotype data about the sample. “Tall” version of table. Primary key is (gene, sample). results_genes_tib: results of the limma differential expression analysis. Each row is a gene. 3.2 Expression profiling with microarrays Explain how microarrays work. Probably reference opening of RMA paper. 3.3 T cell expression profiles My first thought on where to look for expression data on T cells: ImmuneSigDB. 3.4 Exploring ImmuneSigDB What’s in ImmuneSigDB? To find out, head over to the GSEA downloads page (you’ll need to register your email address first) and grab the “Current MSigDB xml file”; at the time of this writing, that’s msigdb_v6.2.xml. Let’s put all of our downloaded data into a single directory. data_dir &lt;- dir_create(&quot;data&quot;) Put the MSigDB file into this directory at msigdb_files/msigdb_v6.2.xml. We are only interested in the C7 gene set, also known as ImmuneSigDB. For now we are using XPath to extract the relevant data; perhaps we should show how to explore the XML file and construct this query. x &lt;- read_xml(fs::path(data_dir, &quot;msigdb_files/msigdb_v6.2.xml&quot;)) c7_xml &lt;- xml_find_all(x, &quot;//GENESET[contains(@CATEGORY_CODE,&#39;C7&#39;)]&quot;) c7_tib &lt;- c7_xml %&gt;% as_list %&gt;% purrr::map(~ as_tibble(attributes(.x))) %&gt;% bind_rows %&gt;% clean_names Each row in c7_tib represents a gene set from ImmuneSigDB. We filter down to those gene sets we suspect relate to T cells. tcell_terms &lt;- c(&quot;TCELL&quot;, &quot;CD3&quot;, &quot;CD4&quot;, &quot;CD8&quot;) c7_tcells &lt;- c7_tib %&gt;% rowwise %&gt;% filter(any(str_detect(standard_name, tcell_terms))) %&gt;% ungroup We can now explore publications and GEO data sets used to build these gene sets. We are specifically interested in human, not mouse, T cells in this chapter. c7_pubs &lt;- c7_tcells %&gt;% filter(organism == &quot;Homo sapiens&quot;) %&gt;% group_by(pmid) %&gt;% summarize(n_genesets = n(), n_geoids = n_distinct(geoid), geoids = toString(unique(geoid))) %&gt;% mutate(n_geoids = if_else(geoids == &quot;&quot;, 0L, n_geoids)) %&gt;% arrange(desc(n_genesets)) Let’s get some metdata for these papers. pub_meta_esum &lt;- entrez_summary(db = &quot;pubmed&quot;, id = c7_pubs$pmid, config = httr::config(http_version = 2)) pub_meta_list &lt;- extract_from_esummary(pub_meta_esum, c(&quot;uid&quot;, &quot;pubdate&quot;, &quot;title&quot;)) %&gt;% array_branch(2) pub_meta_vec &lt;- pub_meta_list %&gt;% purrr::map(unlist) %&gt;% flatten_chr() pub_meta &lt;- tribble(~pmid, ~pubdate, ~title, !!!pub_meta_vec) pub_meta &lt;- pub_meta %&gt;% mutate(pubdate = parse_date_time(pubdate, orders = c(&quot;Y&quot;, &quot;Ym&quot;, &quot;Ymd&quot;))) c7_pubs &lt;- c7_pubs %&gt;% left_join(pub_meta) 3.5 Data from one paper First, we download data for GSE2770 from GEO. There are 3 elements in this list, 1 for each platform. download_dir &lt;- fs::path(data_dir, &quot;series_matrix_files&quot;) if (!dir_exists(download_dir)) { dir_create(download_dir) GSE2770 &lt;- getGEO(&quot;GSE2770&quot;, getGPL=FALSE, destdir=download_dir) } else { GSE2770 &lt;- dir_ls(download_dir, glob=&quot;*series_matrix*&quot;) %&gt;% purrr::map(~ getGEO(filename=.x, getGPL=FALSE)) } Next, we pull out the phenotype data. pGSE2770 &lt;- GSE2770 %&gt;% purrr::map(~ as(pData(.x), &quot;data.frame&quot;)) %&gt;% bind_rows() %&gt;% as_tibble() Then we tidy up the phenotype data. pGSE2770tidy &lt;- pGSE2770 %&gt;% select(platform_id, geo_accession, supplementary_file, title) %&gt;% separate(title, c(&quot;cells&quot;, &quot;treatment&quot;, &quot;time&quot;, &quot;replicate&quot;, &quot;platform&quot;), sep=&quot;[_\\\\(\\\\)]&quot;) %&gt;% select(-cells) %&gt;% mutate(replicate = map_chr(replicate, ~ str_split(.x, boundary(&quot;word&quot;))[[1]][2])) %&gt;% mutate(time = as.duration(time)) 3.6 Data from one gene set Let’s just get the CEL files used to generate the GSE2770_IL12_AND_TGFB_ACT_VS_ACT_CD4_TCELL_6H_DN gene set from ImmuneSigDB (Godec et al. 2016). There are only two treatments to compare, at a single time point. Each treatment is replicated twice. # get just the U133A cel files cel_file_urls &lt;- pGSE2770tidy %&gt;% filter(time == duration(&quot;6h&quot;) &amp; (treatment %in% c(&quot;antiCD3+antiCD28+IL12+TGFbeta&quot;, &quot;antiCD3+antiCD28&quot;)) &amp; platform == &quot;U133A&quot;) %&gt;% .$supplementary_file We then download the CEL files. download_dir &lt;- fs::path(data_dir, &quot;cel_files&quot;) if (!dir_exists(download_dir)) { dir_create(download_dir) cel_file_names &lt;- path_file(url_parse(cel_file_urls)$path) cel_files_local &lt;- map2(cel_file_urls, fs::path(download_dir, cel_file_names), ~ curl_download(.x, .y)) %&gt;% simplify() } else { cel_files_local &lt;- dir_ls(download_dir, glob=&quot;*.cel*&quot;, ignore.case=TRUE) } 3.7 Load expression data And read them into an oligo ExpressionFeatureSet object. Note the feature data (i.e. the probeset IDs) are not stored in the feature data of the ExpressionSet object, but rather in a SQLlite database pd.hg.u133a somewhere on disk that the call to rma() will pick up. raw_data &lt;- read.celfiles(cel_files_local) 3.8 Preprocess expression data Run RMA on our batch of CEL files to be compared. processed_data &lt;- rma(raw_data) as_tibble(exprs(processed_data), rownames = &quot;probe_set_id&quot;) 3.9 Map probesets to genes Because we want to do our differential expression analysis at the gene level, not the probeset level, we need to map probeset IDs to gene symbols. To ensure comparability with the GSEA gene sets, we’ll use the annotations provided by the Broad that are used in GSEA. chip_file_url &lt;- &quot;ftp://ftp.broadinstitute.org/pub/gsea/annotations/HG_U133A.chip&quot; chip_file_name &lt;- path_file(url_parse(chip_file_url)$path) download_dir &lt;- fs::path(data_dir, &quot;chip_files&quot;) if (!dir_exists(download_dir)) { dir_create(download_dir) chip_file &lt;- curl_download(chip_file_url, fs::path(download_dir, chip_file_name)) } else { chip_file &lt;- fs::path(download_dir, chip_file_name) } We need to clean up the data a bit: the import produced a bogus column (X4), and we only want one gene symbol per probeset ID. U133A_chip_raw &lt;- read_tsv(chip_file) U133A_chip &lt;- U133A_chip_raw %&gt;% select(-X4) %&gt;% clean_names() %&gt;% rowwise() %&gt;% mutate(first_gene_symbol = str_trim(str_split(gene_symbol, &quot;///&quot;)[[1]][1])) Finally we can join with our processed data! eset_tib &lt;- as_tibble(exprs(processed_data), rownames = &quot;probe_set_id&quot;) eset_tib_genes &lt;- eset_tib %&gt;% left_join(U133A_chip, by = &quot;probe_set_id&quot;) We now remove probesets that don’t map to a gene symbol; note chip files encode this fact with ---, which we demonstrate first before the filter. eset_tib_genes %&gt;% filter(is.na(first_gene_symbol)) %&gt;% count() # 0 eset_tib_genes %&gt;% filter(first_gene_symbol == &quot;---&quot;) %&gt;% count() # 1,109 eset_tib_genes &lt;- eset_tib_genes %&gt;% filter(first_gene_symbol != &quot;---&quot;) Some genes have multiple probesets that map to them. GSEA handles this situation by only keeping the maximum intensity value across all probesets that map to the gene. In GSEA terminology, we are using the max probe algorithm to collapse our pobesets at the gene level. eset_tib_genes_only &lt;- eset_tib_genes %&gt;% select(-c(probe_set_id, gene_symbol, gene_title)) %&gt;% group_by(first_gene_symbol) %&gt;% summarise_all(max) 3.10 Exploring preprocessed expression data We join our expression data with our phenotype data so that we know which treatment was used for each sample. eset_tidy &lt;- eset_tib_genes_only %&gt;% gather(key = &quot;geo_accession&quot;, value = &quot;expression&quot;, starts_with(&quot;GSM&quot;)) %&gt;% mutate(geo_accession = str_extract(geo_accession, &quot;^([^.]+)&quot;)) eset_tidy_p &lt;- eset_tidy %&gt;% left_join(pGSE2770tidy, by = &quot;geo_accession&quot;) genes &lt;- c(&quot;IFNG&quot;, &quot;TBX21&quot;, &quot;IL4&quot;, &quot;GATA3&quot;) ggplot(eset_tidy_p %&gt;% filter(first_gene_symbol %in% genes), aes(x=treatment, y=expression, color=replicate)) + geom_point() + facet_wrap(~first_gene_symbol, ncol=1, scales=&quot;free&quot;) + theme_bw() Figure 3.1: Expression level vs. treatment 3.11 Differential expression analysis Now we’ll take our new genes-only expression data and put it into a form expected by limma. eset_genes &lt;- eset_tib_genes_only %&gt;% as.data.frame() %&gt;% column_to_rownames(var=&quot;first_gene_symbol&quot;) %&gt;% data.matrix() %&gt;% ExpressionSet() One last step: we need to make the design matrix for this comparison. treatments &lt;- factor(c(1,2,2,1), labels=c(&quot;untreated&quot;, &quot;treated&quot;)) # weird ordering of files design &lt;- model.matrix(~treatments) Finally we use limma to perform a differential expression analysis! fit_genes &lt;- lmFit(eset_genes, design) fit2_genes &lt;- eBayes(fit_genes) results_genes &lt;- topTable(fit2_genes, number=Inf) results_genes_tib &lt;- as_tibble(results_genes, rownames = &quot;gene&quot;) Let’s look at our results. Figure 3.2: Volcano plot made with biobroom References "],
["rnaseq.html", "Chapter 4 RNA-seq", " Chapter 4 RNA-seq Some great RNA-seq data from our infino project. "],
["scrnaseq.html", "Chapter 5 scRNA-seq", " Chapter 5 scRNA-seq 10x generously makes some single-cell RNA-seq datasets available. We also have some data from Chrystal Paulos. "],
["references.html", "References", " References "]
]
