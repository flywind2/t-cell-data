[
["index.html", "Learning About T Cells Through Data Preface", " Learning About T Cells Through Data Hammer Lab 2018-10-12 Preface This book explores what open data sets can tell us about T cells. This exploration will highlight a few of the many repositories of data available for analysis, provide code samples for working with this data, and examine the evidence in this data for the various subsets, states, and behaviors of T cells. There are two specific questions that motivate this exploration: Given a T cell, how can we determine its subset and state Given a T cell, how can we perturb it to a desired subset and state Wet lab protocols for working with human primary T cells are found in our lab’s Human Primary T cells: A Practical Guide (B. A. Aksoy et al. 2018). This book is complementary to that guide, with a focus on software and data rather than wet lab protocols. References "],
["introduction.html", "Chapter 1 Introduction", " Chapter 1 Introduction T cells are important. Here’s a picture of activated vs. unactivated T cells from (Jung et al. 2016). SEM images of resting (A) and effector (B) peripheral blood human T cells. (White scale bars: 1 μm.) TCRs are found in the squiggles. They are x size. Here’s the proportion in circulating blood. Here’s how many come from the thymus per day. Here’s how long they live. References "],
["flow.html", "Chapter 2 Flow 2.1 Exploring FlowRepository 2.2 Data from one paper", " Chapter 2 Flow # Bioconductor library(FlowRepositoryR) library(flowCore) library(openCyto) library(ggcyto) # Tidyverse library(fs) library(tidyverse) We’ll examine the OMIP panel data available from FlowRepository, using the client library FlowRepositoryR, and demonstrate phenotypic differences between T cell types based on the protein expression levels captured in these assays. To aid in identifying and visualizing these different cell populations, a variety of tools built on flowCore will be used and in particular, openCyto will enable us to model and manipulate the workflows used in the OMIP publications to identify T cell types. 2.1 Exploring FlowRepository TBD Attempt to show consolidated metadata from all OMIP datasets This will likely need to involve downloading the data to demonstrate anything useful (i.e. which markers are present) Show markers available by datasets relating to Human t-cells (not sure how to filter to human only yet) 2.2 Data from one paper Initial Example: OMIP-021 Innate-like T-cell Panel (FR-FCM-ZZ9H) data_dir &lt;- dir_create(&quot;data/flow&quot;) dataset_id &lt;- &quot;FR-FCM-ZZ9H&quot; dataset_path &lt;- fs::path(data_dir, dataset_id) dataset &lt;- flowRep.get(dataset_id) if (!dir_exists(dataset_path)) dataset &lt;- download(dataset, dirpath=dataset_path, only.files=&quot;Donor.*fcs&quot;, show.progress=F) fr &lt;- read.FCS(fs::path(getwd(), dataset_path, &#39;Donor1.fcs&#39;)) fr %&gt;% exprs %&gt;% data.frame %&gt;% head(10) %&gt;% knitr::kable(format.args = list(digits=3)) FSC.A FSC.H SSC.A SSC.H X450.50Violet.A X525.50Violet.A X540.30Violet.A X585.15Violet.A X610.20Violet.A X670.30Violet.A X670.14Red.A X730..45Red.A X780.60Red.A X530.30Blue.A X710.50Blue.A X582.15Yellow.A X610.20Yellow.A X670.30Yellow.A X710.50Yellow.A X780.60Yellow.A Time 119565 108322 82937 76142 1130 257 630 1002 3625 5465 7061 13215 6966 222.4 17786 803 418 20700 29263 19368 136 107004 77596 262143 207144 1223 732 995 169 721 114 1110 8055 2695 420.8 926 358 294 851 70563 2586 136 214908 139281 262143 226353 3218 1049 2240 1467 7903 10092 8914 26039 10930 561.1 19171 994 733 21668 88813 12031 136 119453 107496 67842 62072 2473 351 5828 14664 22003 3548 7316 6115 951 112.0 5504 184 448 4450 17505 1143 136 122345 111352 62728 56540 541 194 2601 735 1267 1095 3060 4466 4531 95.4 5793 435 440 8354 16969 3564 137 137030 124521 77133 70557 4062 471 10052 23228 41648 6317 13904 15326 2217 152.7 5801 189 829 10039 21626 2003 138 153801 122139 122174 80251 924 735 2110 1059 2827 2641 287 1277 611 4595.7 6182 175 201 822 33043 1301 138 177071 145150 168704 148426 731 679 1243 337 1045 201 415 9995 1659 291.3 1052 271 366 570 47515 953 138 165853 118245 122113 89253 2785 511 7996 2560 15636 9627 10654 29089 14198 337.8 20733 1203 2341 24269 40187 12859 138 121005 108937 72537 66157 255 205 3215 724 2316 153 361 829 141 166.0 4320 335 819 1027 21945 244 138 In this dataset, one way to identify lymphocytes is by looking at modes in the relationship between side and forward scatter: ggcyto(fr, aes(x=&#39;FSC-A&#39;, y=&#39;SSC-A&#39;)) + geom_hex(bins=100) To identify the lymphocyte cells above, openCyto gating can be used to select the largest cluster of cells automatically and visualize what fraction of the population these cells constitute: gate &lt;- openCyto::flowClust.2d(fr, &#39;FSC-A&#39;, &#39;SSC-A&#39;, K=3, quantile=.9) ggcyto(fr, aes(x=&#39;FSC-A&#39;, y=&#39;SSC-A&#39;)) + geom_hex(bins=100) + geom_gate(gate) + geom_stats() 2.2.1 Gating By repeating the above process for all cell types of interest in the paper, the workflow can be reproduced via a GatingTemplate as shown below, which could also be built programmatically instead. The graphical representation of the template shows how cell types will be recursively defined based on 2 dimensional filters: template &lt;- &#39;alias,pop,parent,dims,gating_method,gating_args,collapseDataForGating,groupBy,preprocessing_method,preprocessing_args Live,+,root,&quot;FSC-A,525/50Violet-A&quot;,&quot;polyGate&quot;,&quot;x=c(0,3e5,3e5,1e5,.5e5,0),y=c(0,0,2.3,2.3,2,1.5)&quot;,,,, Lymphocytes,+,Live,&quot;FSC-A,SSC-A&quot;,&quot;flowClust.2d&quot;,&quot;K=3,quantile=.95&quot;,,,, Singlets,+,Lymphocytes,&quot;FSC-A,FSC-H&quot;,&quot;singletGate&quot;,&quot;maxit=1000,wider_gate=T,prediction_level=.999999999&quot;,,,, gdTCells,+,Singlets,&quot;670/30Violet-A,530/30Blue.A&quot;,&quot;flowClust.2d&quot;,&quot;K=3,target=c(2.5,2.5)&quot;,,,, abTCells,+,Singlets,&quot;670/30Violet-A,530/30Blue.A&quot;,&quot;flowClust.2d&quot;,&quot;K=3,target=c(2.5,1),quantile=0.95&quot;,,,, maiTCells,+,abTCells,&quot;582/15Yellow.A,540/30Violet.A&quot;,&quot;polyGate&quot;,&quot;x=c(2.7,5,5,2.7),y=c(2.5,2.5,5,5)&quot;,,,,&#39; template_path &lt;- file_temp(ext=&#39;.csv&#39;) write_lines(template, template_path) gt &lt;- gatingTemplate(template_path) plot(gt) The above template only outlines the gating workflow but to apply it to our data, these are the common steps: Apply compensation to the raw FCS data if necessary (not necessary in this case as the authors did this beforehand) Define channel transformations to make gating and visualization possible Define any custom gating functions needed in the workflow, which is particularly useful for setting manual gates Apply the gating template to the data at hand, which in this case is represented as a flowFrame but could also be a flowSet representing a collection of experiments Here is the realization of these steps for this data specifically: # Define logical transformation for all fluorescent channels and build a &quot;GatingSet&quot;, which is a wrapper # class that binds numeric data with transformations and gating information transformer &lt;- transformerList(colnames(fr@description$SPILL), logicle_trans()) gs &lt;- transform(GatingSet(flowSet(fr)), transformer) # Define a custom polygon gating function, that is used in our template to deal with situations # that are difficult to define an automated gate for .polyGate &lt;- function(fr, pp_res, channels, filterId=&quot;polygate&quot;, ...){ args &lt;- list(...) g &lt;- data.frame(x=args$x, y=args$y) colnames(g) &lt;- channels flowCore::polygonGate(.gate=g, filterId=filterId) } registerPlugins(fun=.polyGate, methodName=&#39;polyGate&#39;,dep=NA) # Apply the gating to the data (this may take a couple minutes) gating(gt, gs) 2.2.2 Results Now that the workflow is finished, here is a look at all cell types identified: autoplot(gs[[1]], strip.text = &quot;gate&quot;, bins=100, merge=F, axis_inverse_trans=F) + flow_theme This should then be comparable to what was in the OMIP-021 publication, and here are relevant figures demonstrating the similarity of the cell subsets captured: optional caption text "],
["microarrays.html", "Chapter 3 Microarrays 3.1 Overview 3.2 Expression profiling with microarrays 3.3 T cell expression profiles 3.4 Exploring ImmuneSigDB 3.5 Data from one paper 3.6 Data from one gene set 3.7 Load expression data 3.8 Preprocess expression data 3.9 Map probesets to genes 3.10 Exploring preprocessed expression data 3.11 Differential expression analysis", " Chapter 3 Microarrays # Publication-related library(kableExtra) # Bioconductor library(GEOquery) library(oligo) library(limma) library(biobroom) # Domain specific library(rentrez) # General purpose library(curl) library(urltools) library(xml2) # Tidyverse library(fs) library(lubridate) library(janitor) library(tidyverse) 3.1 Overview Our goal is to find some measurement we can perform to distinguish T cells from other cells, as well as T cell subsets from one another. Gene expression as measured by expression microarrays is one candidate measurement we could perform. In this chapter, we’ll seek out open expression microarray data generated from T cells and do some analysis to see if we can distinguish T cells and their subsets using this data. We will create several tibbles over the course of this chapter, including: c7_tcells: our best attempt at pulling out the T cell data sets from ImmuneSigDB. Each row is a gene set. c7_pubs: publications from which ImmuneSigDB gene sets are derived. Each row is a PMID. pGSE2770tidy: phenotype information for a single GSE GEO ID from ImmuneSigDB. Each row is a GSM GEO ID, i.e. a sample. eset_tib_genes: preprocessed expression data for the samples we’re analyzing. “Wide” version of table with one column per sample. Primary key is gene. eset_tidy_p: preprocessed expression data joined to phenotype data about the sample. “Tall” version of table. Primary key is (gene, sample). results_genes_tib: results of the limma differential expression analysis. Each row is a gene. 3.2 Expression profiling with microarrays Explain how microarrays work. Probably reference opening of RMA paper. 3.3 T cell expression profiles My first thought on where to look for expression data on T cells: ImmuneSigDB. 3.4 Exploring ImmuneSigDB What’s in ImmuneSigDB? To find out, head over to the GSEA downloads page (you’ll need to register your email address first) and grab the “Current MSigDB xml file”; at the time of this writing, that’s msigdb_v6.2.xml. Let’s put all of our downloaded data into a single directory. data_dir &lt;- dir_create(&quot;data&quot;) Put the MSigDB file into this directory at msigdb_files/msigdb_v6.2.xml. We are only interested in the C7 gene set, also known as ImmuneSigDB. For now we are using XPath to extract the relevant data; perhaps we should show how to explore the XML file and construct this query. x &lt;- read_xml(fs::path(data_dir, &quot;msigdb_files/msigdb_v6.2.xml&quot;)) c7_xml &lt;- xml_find_all(x, &quot;//GENESET[contains(@CATEGORY_CODE,&#39;C7&#39;)]&quot;) c7_tib &lt;- c7_xml %&gt;% as_list %&gt;% purrr::map(~ as_tibble(attributes(.x))) %&gt;% bind_rows %&gt;% clean_names Each row in c7_tib represents a gene set from ImmuneSigDB. We filter down to those gene sets we suspect relate to T cells. tcell_terms &lt;- c(&quot;TCELL&quot;, &quot;CD3&quot;, &quot;CD4&quot;, &quot;CD8&quot;) c7_tcells &lt;- c7_tib %&gt;% rowwise %&gt;% filter(any(str_detect(standard_name, tcell_terms))) %&gt;% ungroup We can now explore publications and GEO data sets used to build these gene sets. We are specifically interested in human, not mouse, T cells in this chapter. tcell_pubs &lt;- c7_tcells %&gt;% filter(organism == &quot;Homo sapiens&quot;) %&gt;% group_by(pmid) %&gt;% dplyr::summarize(n_genesets = n(), n_geoids = n_distinct(geoid), geoids = toString(unique(geoid))) %&gt;% mutate(n_geoids = if_else(geoids == &quot;&quot;, 0L, n_geoids)) %&gt;% arrange(desc(n_genesets)) Let’s get some metdata for these papers. pub_meta_esum &lt;- entrez_summary(db = &quot;pubmed&quot;, id = tcell_pubs$pmid, config = httr::config(http_version = 2)) pub_meta_list &lt;- extract_from_esummary(pub_meta_esum, c(&quot;uid&quot;, &quot;pubdate&quot;, &quot;title&quot;)) %&gt;% array_branch(2) pub_meta_vec &lt;- pub_meta_list %&gt;% purrr::map(unlist) %&gt;% flatten_chr() pub_meta &lt;- tribble(~pmid, ~pubdate, ~title, !!!pub_meta_vec) pub_meta &lt;- pub_meta %&gt;% mutate(pubdate = parse_date_time(pubdate, orders = c(&quot;Y&quot;, &quot;Ym&quot;, &quot;Ymd&quot;))) tcell_pubs &lt;- tcell_pubs %&gt;% left_join(pub_meta, by = &quot;pmid&quot;) pmid n_genesets n_geoids geoids pubdate title 14607935 90 1 GSE2770 2003-11-15 Identification of novel genes regulated by IL-12, IL-4, or TGF-beta during the early polarization of CD4+ lymphocytes. 20620947 66 1 GSE17974 2010-06-25 Genome-wide profiling of interleukin-4 and STAT6 transcription factor regulation of human Th2 cell programming. 15789058 48 1 GSE22886 2005-06-01 Immune response in silico (IRIS): immune-specific genes identified from a compendium of microarray expression data. 16474395 48 1 GSE3982 2006-03-01 Positive regulation of immune cell function and inflammatory responses by phosphatase PAC-1. 15210650 24 1 GSE1460 2004-08-01 Gene expression profiles during human CD4+ T cell differentiation. 22434910 20 1 GSE36476 2012-04-10 Signal inhibition by the dual-specific phosphatase 4 impairs T cell-dependent B-cell responses with age. 15928199 18 1 GSE22601 2005-06-06 New insights on human T cell development by quantitative T cell receptor gene rearrangement studies and gene expression profiling. 16423401 18 1 GSE3720 2006-05-01 Distinct gene expression in human Vdelta1 and Vdelta2 gammadelta T cells following non-TCR agonist stimulation. 19464196 18 1 GSE15659 2009-06-19 Functional delineation and differentiation dynamics of human CD4+ T cells expressing the FoxP3 transcription factor. 19568420 16 1 GSE11057 2009-07-01 Deconvolution of blood microarray data identifies cellular activation patterns in systemic lupus erythematosus. 20190146 16 1 GSE19888 2010-04-01 Activation of mast cells by trimeric G protein Gi3; coupling to the A3 adenosine receptor directly and upon T cell contact. 21108462 16 1 GSE17301 2010-12-01 Effects of IFN-α as a signal-3 cytokine on human naïve and antigen-experienced CD8(+) T cells. 21347372 16 1 GSE24634 2011-02-09 Analysis of the transcriptional program of developing induced regulatory T cells. 22086415 16 3 GSE33374, GSE33424, GSE33425 2012-01-12 Human MAIT and CD8αα cells develop from a pool of type-17 precommitted CD8+ T cells. 21632718 14 1 GSE28726 2011-07-01 A naive-like population of human CD1d-restricted T cells expressing intermediate levels of promyelocytic leukemia zinc finger. 18281483 12 1 GSE8685 2008-02-15 Differential effects of interleukin-2 and interleukin-15 versus interleukin-21 on CD4+ cutaneous T-cell lymphoma cells. 20304822 12 1 GSE20198 2010-05-01 Activating transcription factor 3 is a positive regulator of human IFNG gene expression. 21471443 12 1 GSE26928 2011-05-15 CXCR5 expressing human central memory CD4 T cells and their relevance for humoral immune responses. 21926977 12 1 GSE23321 2011-09-18 A human memory T cell subset with stem cell-like properties. 22715389 12 1 GSE32901 2012-01-01 Effector CD4+ T cell expression signatures and immune-mediated disease associated genes. 18275831 10 1 GSE10325 2008-02-01 Combined deficiency of proapoptotic regulators Bim and Fas results in the early onset of systemic autoimmunity. 21768398 10 1 GSE22025 2011-08-15 Progesterone promotes differentiation of human cord blood fetal T cells into T regulatory cells but suppresses their differentiation into Th17 cells. 15965501 8 1 GSE8835 2005-07-01 Chronic lymphocytic leukemia cells induce changes in gene expression of CD4 and CD8 T cells. 19201859 8 1 GSE13887 2009-02-15 Activation of mammalian target of rapamycin controls the loss of TCRzeta in lupus T cells through HRES-1/Rab4-regulated lysosomal degradation. 19414752 8 1 GSE14908 2009-05-15 A network modeling approach to analysis of the Th2 memory responses underlying human atopic disease. 18024188 6 1 GSE7460 2007-11-01 Foxp3 transcription-factor-dependent and -independent regulation of the regulatory T cell transcriptional signature. 19050264 6 1 GSE12963 2008-12-15 Tat-induced FOXO3a is a key mediator of apoptosis in HIV-1-infected human CD4+ T lymphocytes. 19201849 6 1 GSE13738 2009-02-15 Human CD4+ memory T cells are preferential targets for bystander activation and apoptosis. 19698979 6 1 GSE15735 2009-09-04 Genome-wide mapping of HATs and HDACs reveals distinct functions in active and inactive genes. 21383243 6 1 GSE26495 2011-04-01 Phenotype, function, and gene expression profiles of programmed death-1(hi) CD8 T cells in healthy human adults. 21968650 6 1 GSE27291 2012-01-01 The gene expression profile of phosphoantigen-specific human γδ T lymphocytes is a blend of αβ T-cell and NK-cell signatures. 22941246 6 1 GSE35685 2012-10-01 Lymphoid priming in human bone marrow begins before expression of CD10 with upregulation of L-selectin. 16951325 4 1 GSE5142 2006-09-15 Mechanisms regulating the proliferative potential of human CD8+ T lymphocytes overexpressing telomerase. 20890291 4 2 GSE24026, GSE24081 2010-10-01 Transcriptional analysis of HIV-specific CD8+ T cells shows that PD-1 inhibits T cell function by upregulating BATF. 18081042 2 1 GSE6566 2008-01-01 The strength of T cell stimulation determines IL-7 responsiveness, secondary expansion, and lineage commitment of primed human CD4+IL-7Rhi T cells. 18270326 2 1 GSE10463 2008-08-15 Activation of the aryl hydrocarbon receptor is essential for mediating the anti-inflammatory effects of a novel low-molecular-weight compound. 21131424 2 1 GSE23984 2011-01-01 The vitamin D analog, TX527, promotes a human CD4+CD25highCD127low regulatory T cell profile and induces a migratory signature specific for homing to sites of inflammation. 21551231 2 1 GSE26156 2011-06-30 Modulation of microRNA expression in human T-cell development: targeting of NOTCH3 by miR-150. 22174157 2 1 GSE26890 2012-02-09 Functional heterogeneity of human effector CD8+ T cells. 23169781 2 1 GSE41087 2013-02-21 A novel function for FOXP3 in humans: intrinsic regulation of conventional T cells. 26405566 2 1 GSE43260 2015-08-01 BTLA marks a less-differentiated tumor-infiltrating lymphocyte subset in melanoma with enhanced survival properties. 3.5 Data from one paper First, we download data for GSE2770 from GEO. There are 3 elements in this list, 1 for each platform. download_dir &lt;- fs::path(data_dir, &quot;series_matrix_files&quot;) if (!dir_exists(download_dir)) { dir_create(download_dir) GSE2770 &lt;- getGEO(&quot;GSE2770&quot;, getGPL=FALSE, destdir=download_dir) } else { GSE2770 &lt;- dir_ls(download_dir, glob=&quot;*series_matrix*&quot;) %&gt;% purrr::map(~ getGEO(filename=.x, getGPL=FALSE)) } Next, we pull out the phenotype data. pGSE2770 &lt;- GSE2770 %&gt;% purrr::map(~ as(pData(.x), &quot;data.frame&quot;)) %&gt;% bind_rows() %&gt;% as_tibble() Then we tidy up the phenotype data. pGSE2770tidy &lt;- pGSE2770 %&gt;% select(platform_id, geo_accession, supplementary_file, title) %&gt;% separate(title, c(&quot;cells&quot;, &quot;treatment&quot;, &quot;time&quot;, &quot;replicate&quot;, &quot;platform&quot;), sep=&quot;[_\\\\(\\\\)]&quot;) %&gt;% select(-cells) %&gt;% mutate(replicate = map_chr(replicate, ~ str_split(.x, boundary(&quot;word&quot;))[[1]][2])) %&gt;% mutate(time = as.duration(time)) 3.6 Data from one gene set Let’s just get the CEL files used to generate the GSE2770_IL12_AND_TGFB_ACT_VS_ACT_CD4_TCELL_6H_DN gene set from ImmuneSigDB (Godec et al. 2016). There are only two treatments to compare, at a single time point. Each treatment is replicated twice. # get just the U133A cel files cel_file_urls &lt;- pGSE2770tidy %&gt;% filter(time == duration(&quot;6h&quot;) &amp; (treatment %in% c(&quot;antiCD3+antiCD28+IL12+TGFbeta&quot;, &quot;antiCD3+antiCD28&quot;)) &amp; platform == &quot;U133A&quot;) %&gt;% .$supplementary_file We then download the CEL files. download_dir &lt;- fs::path(data_dir, &quot;cel_files&quot;) if (!dir_exists(download_dir)) { dir_create(download_dir) cel_file_names &lt;- path_file(url_parse(cel_file_urls)$path) cel_files_local &lt;- map2(cel_file_urls, fs::path(download_dir, cel_file_names), ~ curl_download(.x, .y)) %&gt;% simplify() } else { cel_files_local &lt;- dir_ls(download_dir, glob=&quot;*.cel*&quot;, ignore.case=TRUE) } 3.7 Load expression data And read them into an oligo ExpressionFeatureSet object. Note the feature data (i.e. the probeset IDs) are not stored in the feature data of the ExpressionSet object, but rather in a SQLlite database pd.hg.u133a somewhere on disk that the call to rma() will pick up. raw_data &lt;- read.celfiles(cel_files_local) 3.8 Preprocess expression data Run RMA on our batch of CEL files to be compared. processed_data &lt;- rma(raw_data) as_tibble(exprs(processed_data), rownames = &quot;probe_set_id&quot;) 3.9 Map probesets to genes Because we want to do our differential expression analysis at the gene level, not the probeset level, we need to map probeset IDs to gene symbols. To ensure comparability with the GSEA gene sets, we’ll use the annotations provided by the Broad that are used in GSEA. chip_file_url &lt;- &quot;ftp://ftp.broadinstitute.org/pub/gsea/annotations/HG_U133A.chip&quot; chip_file_name &lt;- path_file(url_parse(chip_file_url)$path) download_dir &lt;- fs::path(data_dir, &quot;chip_files&quot;) if (!dir_exists(download_dir)) { dir_create(download_dir) chip_file &lt;- curl_download(chip_file_url, fs::path(download_dir, chip_file_name)) } else { chip_file &lt;- fs::path(download_dir, chip_file_name) } We need to clean up the data a bit: the import produced a bogus column (X4), and we only want one gene symbol per probeset ID. U133A_chip_raw &lt;- read_tsv(chip_file) U133A_chip &lt;- U133A_chip_raw %&gt;% select(-X4) %&gt;% clean_names() %&gt;% rowwise() %&gt;% mutate(first_gene_symbol = str_trim(str_split(gene_symbol, &quot;///&quot;)[[1]][1])) Finally we can join with our processed data! eset_tib &lt;- as_tibble(exprs(processed_data), rownames = &quot;probe_set_id&quot;) eset_tib_genes &lt;- eset_tib %&gt;% left_join(U133A_chip, by = &quot;probe_set_id&quot;) We now remove probesets that don’t map to a gene symbol; note chip files encode this fact with ---, which we demonstrate first before the filter. eset_tib_genes %&gt;% filter(is.na(first_gene_symbol)) %&gt;% count() # 0 eset_tib_genes %&gt;% filter(first_gene_symbol == &quot;---&quot;) %&gt;% count() # 1,109 eset_tib_genes &lt;- eset_tib_genes %&gt;% filter(first_gene_symbol != &quot;---&quot;) Some genes have multiple probesets that map to them. GSEA handles this situation by only keeping the maximum intensity value across all probesets that map to the gene. In GSEA terminology, we are using the max probe algorithm to collapse our pobesets at the gene level. eset_tib_genes_only &lt;- eset_tib_genes %&gt;% select(-c(probe_set_id, gene_symbol, gene_title)) %&gt;% group_by(first_gene_symbol) %&gt;% summarise_all(max) 3.10 Exploring preprocessed expression data We join our expression data with our phenotype data so that we know which treatment was used for each sample. eset_tidy &lt;- eset_tib_genes_only %&gt;% gather(key = &quot;geo_accession&quot;, value = &quot;expression&quot;, starts_with(&quot;GSM&quot;)) %&gt;% mutate(geo_accession = str_extract(geo_accession, &quot;^([^.]+)&quot;)) eset_tidy_p &lt;- eset_tidy %&gt;% left_join(pGSE2770tidy, by = &quot;geo_accession&quot;) genes &lt;- c(&quot;IFNG&quot;, &quot;TBX21&quot;, &quot;IL4&quot;, &quot;GATA3&quot;) ggplot(eset_tidy_p %&gt;% filter(first_gene_symbol %in% genes), aes(x=treatment, y=expression, color=replicate)) + geom_point() + facet_wrap(~first_gene_symbol, ncol=1, scales=&quot;free&quot;) + theme_bw() Figure 3.1: Expression level vs. treatment 3.11 Differential expression analysis Now we’ll take our new genes-only expression data and put it into a form expected by limma. eset_genes &lt;- eset_tib_genes_only %&gt;% as.data.frame() %&gt;% column_to_rownames(var=&quot;first_gene_symbol&quot;) %&gt;% data.matrix() %&gt;% ExpressionSet() One last step: we need to make the design matrix for this comparison. treatments &lt;- factor(c(1,2,2,1), labels=c(&quot;untreated&quot;, &quot;treated&quot;)) # weird ordering of files design &lt;- model.matrix(~treatments) Finally we use limma to perform a differential expression analysis! fit_genes &lt;- lmFit(eset_genes, design) fit2_genes &lt;- eBayes(fit_genes) results_genes &lt;- topTable(fit2_genes, number=Inf) results_genes_tib &lt;- as_tibble(results_genes, rownames = &quot;gene&quot;) Let’s look at our results. Figure 3.2: Volcano plot made with biobroom References "],
["rnaseq.html", "Chapter 4 RNA-seq", " Chapter 4 RNA-seq Some great RNA-seq data from our infino project. "],
["scrnaseq.html", "Chapter 5 scRNA-seq", " Chapter 5 scRNA-seq 10x generously makes some single-cell RNA-seq datasets available. We also have some data from Chrystal Paulos. "],
["references.html", "References", " References "]
]
